题目描述:
给出一个区间的集合，请合并所有重叠的区间。

示例 1:

输入: [[1,3],[2,6],[8,10],[15,18]]
输出: [[1,6],[8,10],[15,18]]
解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].
示例 2:

输入: [[1,4],[4,5]]
输出: [[1,5]]
解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。

今天打开leetcode刷这个题的时候发现一个月以前有尝试解答过该题，当时就已经想出了通过判断第一个元素比如[1,3] 是否在[2,6]区间内,但是并没有想出顺序性问题比如
[[1,3],[8,10],[2,6]]这样的顺序，所以怀疑自己的思路错了 导致一直没有解答出来

今天看到题解里面提到排序 然后简单看了一下思路 就开始解答题目 很快的写出了代码如下
bool cmp( vector<int>& left, vector<int>& right ) {
    return left[0] < right[0];
}
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>> ret;
        if ( intervals.size() < 2 ) {
            return intervals;
        }
        sort( intervals.begin(), intervals.end(), cmp );
        
        //先把第一个放进去
        ret.push_back( intervals[0] );
        int index = 0;
        for ( int i = 1; i < intervals.size(); ++i ) {
            if ( ret[index][1] >= intervals[i][0] && ret[index][1] <= intervals[i][1] ) {
                //因为是按升序过序列了 [[1,3],[4,5]] 这种 直接更新最右端
                ret[index][1] = intervals[i][1];
            } else if ( intervals[i][0] > ret[index][1] ) {
                ret.push_back( intervals[i] );
                index++;
            }
        }
        return ret;
    }
};

但是有很多异常条件没有考虑进去
比如1：不满足前面更新最右端值的条件 例如[1,4],[2,3] 这种情况下不应该直接push_back到结果集中 所以加了判断
else if ( intervals[i][0] > ret[index][1] ) {
                ret.push_back( intervals[i] );
                index++;
            }
比如2: [[1,3],[2,6],[8,10],[15,18]] 没有判断前面最右端的数字是否在后面区间范围内 比如[2,6] 的6 不在[8,10]之间导致结果成为[1,18]

总结:当遇到异常情况时 不要轻易怀疑自己思路错了,也许可能只是有一些异常情况没有处理到而已
