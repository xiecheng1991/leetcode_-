给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：

二叉树的根是数组中的最大元素。
1.左子树是通过数组中最大值左边部分构造出的最大二叉树。
2.右子树是通过数组中最大值右边部分构造出的最大二叉树。
3.通过给定的数组构建最大二叉树，并且输出这个树的根节点。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximum-binary-tree
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
思路:因为题目说要找最大值作为根节点,然后根节点左边和右边又执行同样的操作 构建一棵树 第一反应就是分治算法,通过最大值分左右两部分,然后执行同样的操作就很容易想到递归 
这个题第一次写题解以后要多写题解
 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
        int get_max_index( vector<int>& nums, int left, int right ) {
          //找出最大值,创建根结点
          int index = left;
          for( int i = left; i <= right; ++i ) {
            if ( nums[i] > nums[index] ) {
              //更新index
              index = i;
            }
          }
          return index;
        }
        TreeNode* helper( vector<int>& nums, int left, int right ){
        if ( left > right ) {
            return NULL;
        }
        int index = get_max_index( nums, left, right );
        TreeNode* root = new TreeNode( nums[index] );
        //处理左子树
        root->left = helper( nums, left, index - 1 );
        //处理右子树
        root->right = helper( nums, index + 1, right );
        return root;
    
    }
    
    TreeNode* constructMaximumBinaryTree( vector<int>& nums ) {
        if ( nums.size() == 0 ) {
            return NULL;
        }
        //找出最大值,创建根结点
        int index = get_max_index( nums, 0, nums.size() - 1 );
        TreeNode* root = new TreeNode( nums[index] );
        //处理左子树
        root->left = helper( nums, 0, index - 1 );
        //处理右子树
        root->right = helper( nums, index + 1, nums.size() - 1 );
        return root;
    }
};
